#!/bin/bash

# Function to display usage
usage() {
  echo "Usage: $0 [-f <values-file>] [--remove]"
  echo "  -f <values-file>  Specify the values file to use for Helm deployment."
  echo "  --remove          Remove the Helm releases instead of installing/upgrading."
  exit 1
}

# Check if the script is run with at least one argument
if [ $# -eq 0 ]; then
  usage
fi

# Parse command-line arguments
VALUES_FILE=""
REMOVE=false

while [[ "$#" -gt 0 ]]; do
  case $1 in
    -f) VALUES_FILE="$2"; shift ;;
    --remove) REMOVE=true ;;
    *) usage ;;
  esac
  shift
done

# Ensure the values file is provided unless removing
if [ -z "$VALUES_FILE" ] && [ "$REMOVE" = false ]; then
  echo "Error: Values file is required."
  usage
fi

# Function to install or upgrade Helm release
deploy_or_upgrade() {
  CONTEXT=$1
  RELEASE_NAME=$2
  ENABLED_FLAG=$3

  echo "Switching to context $CONTEXT..."
  sudo kubectl config use-context "$CONTEXT"

  if sudo helm list | grep -q "$RELEASE_NAME"; then
    echo "$RELEASE_NAME is already installed, upgrading..."
    sudo helm upgrade "$RELEASE_NAME" iperf3-chart --set "$ENABLED_FLAG"=false -f "$VALUES_FILE"
  else
    echo "$RELEASE_NAME is not installed, installing..."
    sudo helm install "$RELEASE_NAME" iperf3-chart --set "$ENABLED_FLAG"=false -f "$VALUES_FILE"
  fi
}

# Function to remove Helm release
remove_release() {
  CONTEXT=$1
  RELEASE_NAME=$2

  echo "Switching to context $CONTEXT..."
  sudo kubectl config use-context "$CONTEXT"

  if sudo helm list | grep -q "$RELEASE_NAME"; then
    echo "Removing $RELEASE_NAME..."
    sudo helm delete "$RELEASE_NAME"
  else
    echo "$RELEASE_NAME is not installed."
  fi
}

# Main script execution
if [ "$REMOVE" = true ]; then
  remove_release "kind-k8s02" "my-iperf3-server"
  remove_release "kind-k8s01" "my-iperf3-client"
else
  deploy_or_upgrade "kind-k8s02" "my-iperf3-server" "client.enabled"
  deploy_or_upgrade "kind-k8s01" "my-iperf3-client" "server.enabled"
fi

echo "Operation completed successfully."

